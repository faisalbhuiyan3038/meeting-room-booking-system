// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id
  email      String       @unique
  firstName  String
  lastName   String
  role       UserRole     @default(USER)
  bookings   Booking[]
  favorites  UserFavorite[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([email])
}

enum UserRole {
  USER
  ADMIN
}

model Room {
  id          String         @id @default(cuid())
  name        String
  capacity    Int
  imageUrl    String?
  amenities   Json
  status      RoomStatus     @default(ACTIVE)
  bookings    Booking[]
  favoredBy   UserFavorite[]
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([status])
}

model UserFavorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime @default(now())

  @@unique([userId, roomId])
  @@index([userId])
  @@index([roomId])
}

enum RoomStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

model Booking {
  id          String        @id @default(cuid())
  roomId      String
  room        Room          @relation(fields: [roomId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(CONFIRMED)
  attendees   Int?
  purpose     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([roomId])
  @@index([userId])
  @@index([startTime, endTime])
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
}

model RoomAvailability {
  id        String   @id @default(cuid())
  roomId    String
  date      DateTime
  slots     Json
  updatedAt DateTime @updatedAt

  @@unique([roomId, date])
  @@index([date])
}
